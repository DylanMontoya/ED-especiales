# -*- coding: utf-8 -*-
"""Ecuaciones diferenciales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1diF76-5QYw2rVgvDd6H9fGX6QXcW58gi

Solución ecuaciones diferenciales
"""

import sympy
# defino las incognitas
x =sympy.Symbol('x')
y =sympy.Function('y')

# # definiendo la ecuación
f = 6*x**2 - 3*x**2*(y(x))
sympy.Eq(y(x).diff(x), f)

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# function that returns dy/dt
def model(y,t):
    k = 0.3
    dydt = -k * y
    return dydt

# initial condition
y0 = 5

# time points
t = np.linspace(0,20)

# solve ODE
y = odeint(model,y0,t)

# plot results
plt.plot(t,y)
plt.xlabel('time')
plt.ylabel('y(t)')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
from matplotlib import pyplot as plt
from numpy import *
from scipy.integrate import odeint
# %matplotlib inline
# Definicion de E.D a resolver: y''+x*y'+20*sin(y)=0
def df(y,x):
    y1, y2= y[0], y[1] #variables de paso
    dy1=y2  # derivada variable 1
    dy2=-x*y2-20*sin(y1) # derivada variable 2
    return [dy1,dy2]

# Condiciones iniciales 
y0 =[0,1]

# Definicion del rango 
x = linspace(0,6,500)

# Para mayor info: help(odeint)
# solucion numerica
sol = odeint(df, y0, x)
y=sol[:,0] #toma el vector correspondiente a la solucion de y1
plt.plot(x,y)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

def f(y, t):
  return np.sin(t)-np.log(y)

y0= 0.32

t = np.linspace(0, 3)

sol = odeint(f, y0, t)

# grafica la solución aproximada mediante el símbolo '+' en color rojo
plt.plot(t, sol,'+',color='r')

